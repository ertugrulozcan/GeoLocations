// <auto-generated />
using System;
using GeoLocations.PostgreSQL.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace GeoLocations.PostgreSQL.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20211007231722_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("GeoLocations.PostgreSQL.Models.CityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("GeoLocations.PostgreSQL.Models.CityNamesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityNames");
                });

            modelBuilder.Entity("GeoLocations.PostgreSQL.Models.ContinentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<long>("GeoNameId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Continents");
                });

            modelBuilder.Entity("GeoLocations.PostgreSQL.Models.ContinentNamesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ContinentId")
                        .HasColumnType("integer");

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContinentId");

                    b.ToTable("ContinentNames");
                });

            modelBuilder.Entity("GeoLocations.PostgreSQL.Models.CountryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("GeoNameId")
                        .HasColumnType("bigint");

                    b.Property<string>("ISOCode")
                        .HasColumnType("text");

                    b.Property<bool>("IsInEuropeanUnion")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("GeoLocations.PostgreSQL.Models.CountryNamesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryNames");
                });

            modelBuilder.Entity("GeoLocations.PostgreSQL.Models.CountyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("Id");

                    b.ToTable("Counties");
                });

            modelBuilder.Entity("GeoLocations.PostgreSQL.Models.CountyNamesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CountyId")
                        .HasColumnType("integer");

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.ToTable("CountyNames");
                });

            modelBuilder.Entity("GeoLocations.PostgreSQL.Models.GeoLocationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<int?>("ContinentId")
                        .HasColumnType("integer");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<int?>("CountyId")
                        .HasColumnType("integer");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ISP")
                        .HasColumnType("text");

                    b.Property<int>("IpVersion")
                        .HasColumnType("integer");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Organization")
                        .HasColumnType("text");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<string>("WeatherStationCode")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ContinentId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CountyId");

                    b.HasIndex("IP");

                    b.HasIndex("RegionId");

                    b.ToTable("GeoLocations");
                });

            modelBuilder.Entity("GeoLocations.PostgreSQL.Models.RegionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("GeoLocations.PostgreSQL.Models.RegionNamesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("RegionNames");
                });

            modelBuilder.Entity("GeoLocations.PostgreSQL.Models.CityNamesEntity", b =>
                {
                    b.HasOne("GeoLocations.PostgreSQL.Models.CityEntity", "City")
                        .WithMany("Names")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("GeoLocations.PostgreSQL.Models.ContinentNamesEntity", b =>
                {
                    b.HasOne("GeoLocations.PostgreSQL.Models.ContinentEntity", "Continent")
                        .WithMany("Names")
                        .HasForeignKey("ContinentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Continent");
                });

            modelBuilder.Entity("GeoLocations.PostgreSQL.Models.CountryNamesEntity", b =>
                {
                    b.HasOne("GeoLocations.PostgreSQL.Models.CountryEntity", "Country")
                        .WithMany("Names")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("GeoLocations.PostgreSQL.Models.CountyNamesEntity", b =>
                {
                    b.HasOne("GeoLocations.PostgreSQL.Models.CountyEntity", "County")
                        .WithMany("Names")
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("County");
                });

            modelBuilder.Entity("GeoLocations.PostgreSQL.Models.GeoLocationEntity", b =>
                {
                    b.HasOne("GeoLocations.PostgreSQL.Models.CityEntity", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("GeoLocations.PostgreSQL.Models.ContinentEntity", "Continent")
                        .WithMany()
                        .HasForeignKey("ContinentId");

                    b.HasOne("GeoLocations.PostgreSQL.Models.CountryEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("GeoLocations.PostgreSQL.Models.CountyEntity", "County")
                        .WithMany()
                        .HasForeignKey("CountyId");

                    b.HasOne("GeoLocations.PostgreSQL.Models.RegionEntity", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.Navigation("City");

                    b.Navigation("Continent");

                    b.Navigation("Country");

                    b.Navigation("County");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("GeoLocations.PostgreSQL.Models.RegionNamesEntity", b =>
                {
                    b.HasOne("GeoLocations.PostgreSQL.Models.RegionEntity", "Region")
                        .WithMany("Names")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("GeoLocations.PostgreSQL.Models.CityEntity", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("GeoLocations.PostgreSQL.Models.ContinentEntity", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("GeoLocations.PostgreSQL.Models.CountryEntity", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("GeoLocations.PostgreSQL.Models.CountyEntity", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("GeoLocations.PostgreSQL.Models.RegionEntity", b =>
                {
                    b.Navigation("Names");
                });
#pragma warning restore 612, 618
        }
    }
}
